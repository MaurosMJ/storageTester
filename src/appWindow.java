/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor. 
 */

import java.awt.Color;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import jcifs.smb.NtlmPasswordAuthentication;
import jcifs.smb.SmbFile;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Mauros
 */
public class appWindow extends javax.swing.JFrame {

    private boolean hide = true;
    private boolean run = false;
    private ImageIcon icon;
    private Image image;
    private Image ScaledImage;
    private final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    private final PrintStream printStream = new PrintStream(outputStream);
    private final SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss.SSS");
    private String logs = "";
    private final String username = System.getProperty("user.name");
    private String hostName = "";
    private String OS = System.getProperty("os.name");
    private String Lhostaddress = "";
    /**
     * Creates new form appWindow
     */
    public appWindow() {
        initComponents();
        atualizaLog("Aplicativo inicializado.");
        atualizaLog("Montando interface do usuário.");
        this.initImg();
        atualizaLog("Interface finalizada.");
        this.tratarParam();
        atualizaLog("Preenchimento dos campos finalizado.");
        atualizaLog("Obtendo informações da estação local.");
        this.getLhostInfo();
        atualizaLog("Todas informações necessárias da estação local foram adicionadas.");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelLNAME = new javax.swing.JLabel();
        labelLHOST = new javax.swing.JLabel();
        labelRHOST = new javax.swing.JLabel();
        labelHNAME = new javax.swing.JLabel();
        linha = new javax.swing.JLabel();
        linha1 = new javax.swing.JLabel();
        labelOS = new javax.swing.JLabel();
        retorno = new javax.swing.JLabel();
        destino = new javax.swing.JLabel();
        host = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        nas = new javax.swing.JLabel();
        fundo = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        senha = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        param = new javax.swing.JTextField();
        dominio = new javax.swing.JTextField();
        usuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        connect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        validate = new javax.swing.JButton();
        log = new javax.swing.JButton();
        hint = new javax.swing.JLabel();
        rede = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        apagar = new javax.swing.JButton();
        copiar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        busca = new javax.swing.JCheckBox();
        infoB = new javax.swing.JLabel();
        aviso = new javax.swing.JLabel();
        readB = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        hintButton = new javax.swing.JLabel();
        reset = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmOK1 = new javax.swing.JLabel();
        cmERROR3 = new javax.swing.JLabel();
        cmERROR1 = new javax.swing.JLabel();
        cmOK2 = new javax.swing.JLabel();
        cmERROR2 = new javax.swing.JLabel();
        cmOK3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("storageTesterGUI");
        setBackground(java.awt.Color.black);
        setForeground(java.awt.Color.black);
        setMinimumSize(new java.awt.Dimension(615, 465));
        setPreferredSize(new java.awt.Dimension(620, 560));
        setResizable(false);
        getContentPane().setLayout(null);

        labelLNAME.setBackground(new java.awt.Color(255, 255, 255));
        labelLNAME.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelLNAME.setText("Localhost");
        labelLNAME.setOpaque(true);
        labelLNAME.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelLNAMEMouseEntered(evt);
            }
        });
        getContentPane().add(labelLNAME);
        labelLNAME.setBounds(105, 160, 140, 14);

        labelLHOST.setBackground(new java.awt.Color(255, 255, 255));
        labelLHOST.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelLHOST.setText("127.0.0.1");
        labelLHOST.setOpaque(true);
        labelLHOST.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelLHOSTMouseEntered(evt);
            }
        });
        getContentPane().add(labelLHOST);
        labelLHOST.setBounds(120, 50, 110, 14);

        labelRHOST.setBackground(new java.awt.Color(255, 255, 255));
        labelRHOST.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRHOST.setText("0.0.0.0");
        labelRHOST.setOpaque(true);
        labelRHOST.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelRHOSTMouseEntered(evt);
            }
        });
        getContentPane().add(labelRHOST);
        labelRHOST.setBounds(340, 40, 170, 14);

        labelHNAME.setBackground(new java.awt.Color(255, 255, 255));
        labelHNAME.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelHNAME.setText("Network-Attached Storage (NAS)");
        labelHNAME.setToolTipText("");
        labelHNAME.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        labelHNAME.setOpaque(true);
        labelHNAME.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelHNAMEMouseEntered(evt);
            }
        });
        getContentPane().add(labelHNAME);
        labelHNAME.setBounds(337, 160, 180, 14);

        linha.setBackground(new java.awt.Color(255, 255, 255));
        linha.setText("jLabel2");
        getContentPane().add(linha);
        linha.setBounds(217, 82, 172, 70);

        linha1.setBackground(new java.awt.Color(0, 0, 0));
        linha1.setText("jLabel2");
        getContentPane().add(linha1);
        linha1.setBounds(215, 52, 174, 70);

        labelOS.setBackground(new java.awt.Color(255, 255, 255));
        labelOS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelOS.setText("SO");
        labelOS.setOpaque(true);
        labelOS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelOSMouseEntered(evt);
            }
        });
        getContentPane().add(labelOS);
        labelOS.setBounds(120, 33, 110, 14);

        retorno.setBackground(new java.awt.Color(0, 0, 0));
        retorno.setText("jLabel2");
        retorno.setOpaque(true);
        getContentPane().add(retorno);
        retorno.setBounds(216, 80, 172, 14);

        destino.setBackground(new java.awt.Color(0, 0, 0));
        destino.setText("jLabel2");
        destino.setOpaque(true);
        getContentPane().add(destino);
        destino.setBounds(216, 110, 172, 14);

        host.setText("jLabel1");
        host.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hostMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                hostMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                hostMouseExited(evt);
            }
        });
        getContentPane().add(host);
        host.setBounds(130, 60, 90, 90);

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("SMB");
        jLabel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204)));
        jLabel12.setOpaque(true);
        getContentPane().add(jLabel12);
        jLabel12.setBounds(280, 94, 40, 16);

        nas.setText("jLabel1");
        getContentPane().add(nas);
        nas.setBounds(362, 54, 110, 110);

        fundo.setBackground(new java.awt.Color(16, 16, 16));
        fundo.setForeground(new java.awt.Color(16, 16, 16));
        fundo.setText("-");
        fundo.setOpaque(true);
        getContentPane().add(fundo);
        fundo.setBounds(0, 30, 590, 150);

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Output LOG:");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel5.setOpaque(true);
        getContentPane().add(jLabel5);
        jLabel5.setBounds(73, 500, 514, 16);

        senha.setEditable(false);
        senha.setBackground(new java.awt.Color(242, 242, 242));
        senha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                senhaMouseEntered(evt);
            }
        });
        getContentPane().add(senha);
        senha.setBounds(10, 360, 280, 30);

        jLabel1.setText("Protocolo");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 392, 280, 14);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(300, 180, 10, 270);

        param.setText("DOMINIO;USUARIO:SENHA");
        param.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                paramMouseEntered(evt);
            }
        });
        param.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paramActionPerformed(evt);
            }
        });
        param.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paramKeyReleased(evt);
            }
        });
        getContentPane().add(param);
        param.setBounds(10, 210, 280, 30);

        dominio.setEditable(false);
        dominio.setBackground(new java.awt.Color(242, 242, 242));
        dominio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dominioMouseEntered(evt);
            }
        });
        getContentPane().add(dominio);
        dominio.setBounds(10, 260, 280, 30);

        usuario.setEditable(false);
        usuario.setBackground(new java.awt.Color(242, 242, 242));
        usuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                usuarioMouseEntered(evt);
            }
        });
        getContentPane().add(usuario);
        usuario.setBounds(10, 310, 280, 30);

        jLabel2.setText("Autenticação para ambiente de rede");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 190, 280, 14);

        jLabel3.setText("Dominio");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 240, 280, 14);

        jLabel4.setText("Usuário");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 290, 280, 14);

        connect.setEnabled(false);
        connect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                connectMouseEntered(evt);
            }
        });
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });
        getContentPane().add(connect);
        connect.setBounds(480, 290, 90, 50);

        logArea.setEditable(false);
        logArea.setBackground(new java.awt.Color(242, 242, 242));
        logArea.setColumns(20);
        logArea.setRows(5);
        logArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        logArea.setMaximumSize(new java.awt.Dimension(164, 94));
        logArea.setMinimumSize(new java.awt.Dimension(164, 94));
        logArea.setName(""); // NOI18N
        jScrollPane1.setViewportView(logArea);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 510, 520, 140);

        validate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                validateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                validateMouseExited(evt);
            }
        });
        validate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateActionPerformed(evt);
            }
        });
        getContentPane().add(validate);
        validate.setBounds(350, 290, 90, 50);

        log.setFont(new java.awt.Font("Tahoma", 0, 26)); // NOI18N
        log.setText("▼");
        log.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logMouseEntered(evt);
            }
        });
        log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logActionPerformed(evt);
            }
        });
        getContentPane().add(log);
        log.setBounds(10, 460, 570, 30);

        hint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hint.setText("Desenvolvido por Mauros Milach, 2023.");
        getContentPane().add(hint);
        hint.setBounds(10, 8, 580, 14);

        rede.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                redeMouseEntered(evt);
            }
        });
        rede.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redeKeyReleased(evt);
            }
        });
        getContentPane().add(rede);
        rede.setBounds(320, 220, 260, 30);

        jLabel11.setText("Diretório de Rede");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(320, 200, 260, 14);

        apagar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                apagarMouseEntered(evt);
            }
        });
        apagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apagarActionPerformed(evt);
            }
        });
        getContentPane().add(apagar);
        apagar.setBounds(10, 530, 50, 40);

        copiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                copiarMouseEntered(evt);
            }
        });
        copiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiarActionPerformed(evt);
            }
        });
        getContentPane().add(copiar);
        copiar.setBounds(10, 580, 50, 40);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(0, 450, 600, 10);

        busca.setSelected(true);
        busca.setText("Arquivos do diretório");
        busca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buscaMouseEntered(evt);
            }
        });
        getContentPane().add(busca);
        busca.setBounds(390, 420, 140, 23);
        getContentPane().add(infoB);
        infoB.setBounds(10, 0, 40, 30);

        aviso.setToolTipText("");
        getContentPane().add(aviso);
        aviso.setBounds(165, 0, 30, 30);

        readB.setEnabled(false);
        readB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                readBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                readBMouseExited(evt);
            }
        });
        readB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readBActionPerformed(evt);
            }
        });
        getContentPane().add(readB);
        readB.setBounds(350, 360, 90, 50);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(300, 260, 300, 2);

        hintButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintButton.setText("Módulo principal");
        hintButton.setToolTipText("");
        getContentPane().add(hintButton);
        hintButton.setBounds(310, 266, 280, 14);

        reset.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        reset.setBorderPainted(false);
        reset.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        reset.setEnabled(false);
        reset.setOpaque(false);
        reset.setSelected(true);
        reset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                resetMouseEntered(evt);
            }
        });
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        getContentPane().add(reset);
        reset.setBounds(480, 360, 90, 50);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SMB 1.0", "SMB 2.0", "SMB 3.0" }));
        jComboBox1.setSelectedItem("SMB 3.0");
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBox1MouseEntered(evt);
            }
        });
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(10, 410, 280, 30);

        jLabel6.setText("Senha");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 340, 280, 14);

        cmOK1.setText("x");
        getContentPane().add(cmOK1);
        cmOK1.setBounds(326, 290, 30, 30);

        cmERROR3.setText("y");
        getContentPane().add(cmERROR3);
        cmERROR3.setBounds(456, 310, 30, 30);

        cmERROR1.setText("y");
        getContentPane().add(cmERROR1);
        cmERROR1.setBounds(326, 310, 30, 30);

        cmOK2.setText("x");
        getContentPane().add(cmOK2);
        cmOK2.setBounds(326, 360, 30, 30);

        cmERROR2.setText("y");
        getContentPane().add(cmERROR2);
        cmERROR2.setBounds(326, 380, 30, 30);

        cmOK3.setText("x");
        getContentPane().add(cmOK3);
        cmOK3.setBounds(456, 290, 30, 30);

        jMenu1.setText("Opções");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Importar XML");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("Sobre");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void paramMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paramMouseEntered
        this.atualizaHint("Deve atender o seguinte requisito: DOMINIO;USUARIO:SENHA.");
        this.setInfoBPosition(95);
    }//GEN-LAST:event_paramMouseEntered

    private void dominioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dominioMouseEntered
        this.atualizaHint("Não é necessário preencher este campo.");
        this.setInfoBPosition(155);
    }//GEN-LAST:event_dominioMouseEntered

    private void usuarioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usuarioMouseEntered
        this.atualizaHint("Não é necessário preencher este campo.");
        this.setInfoBPosition(155);
    }//GEN-LAST:event_usuarioMouseEntered

    private void senhaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_senhaMouseEntered
        this.atualizaHint("Não é necessário preencher este campo.");
        this.setInfoBPosition(155);
    }//GEN-LAST:event_senhaMouseEntered

    private void validateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_validateMouseEntered
        this.atualizaHint("Validar conectividade com o host e obter informações de ambiente.");
        this.setInfoBPosition(85);
        this.hintButton.setText("Teste de conectividade.");
    }//GEN-LAST:event_validateMouseEntered

    private void connectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectMouseEntered
        this.atualizaHint("Realizar acesso ao diretório raiz do host com as informações fornecidas.");
        this.setInfoBPosition(70);
        this.hintButton.setText("Teste de autenticação.");
    }//GEN-LAST:event_connectMouseEntered

    private void logMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logMouseEntered
        if("▼".equals(log.getText())){
        this.atualizaHint("Expandir a janela para visualizar os logs.");
        this.setInfoBPosition(159);
        
        }
        if("▲".equals(log.getText())){
        this.atualizaHint("Ocultar a janela para visualizar os logs.");
        this.setInfoBPosition(164);
        }
    }//GEN-LAST:event_logMouseEntered

    private void paramKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paramKeyReleased
        this.tratarParam();
    }//GEN-LAST:event_paramKeyReleased

    private void tratarParam() {

        String entrada = param.getText().replaceAll("\\s+", "");
        param.setText(entrada);

        if (entrada.indexOf(';') != -1 && entrada.contains(";") && entrada.contains(":")) {
            try {
                dominio.setText(entrada.substring(0, entrada.indexOf(';')));
                usuario.setText(entrada.substring(entrada.indexOf(';') + 1, entrada.indexOf(":", entrada.indexOf(';'))));
                senha.setText(entrada.substring(entrada.indexOf(":") + 1));
            } catch (StringIndexOutOfBoundsException ex) {

            }

        } else {

            this.atualizaDominio("");
            this.atualizaUsuario("");
            this.atualizaSenha("");
        }

    }
    
    private void getLhostInfo(){
        
        this.labelOS.setText(this.OS);
        atualizaLog("Sistema operacional da máquina:"+this.OS+".");
        try {
        InetAddress localHost = InetAddress.getLocalHost();
        this.hostName = localHost.getHostName();
        atualizaLog("Nome da máquina local:"+this.hostName+".");
        labelLHOST.setText(this.hostName);
        this.Lhostaddress = localHost.getHostAddress();
        atualizaLog("Endereço de IP da máquina local:"+this.Lhostaddress+".");
        labelLNAME.setText(Lhostaddress);
        
        } catch (Exception e) {
            
                atualizaLog("Ocorreu um erro ao obter informações da maquina local.");
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                this.atualizaLog(sw.toString());
            }
  
    }

    private void validateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateActionPerformed

  //                             reset.setBackground(Color.BLACK);
 //       reset.setForeground(Color.BLACK);
        
        labelHNAME.setVisible(true);
        atualizaLog("Validando entradas do usuário.");
        if (param.getText().length() > 0 && dominio.getText().length() > 0 && usuario.getText().length() > 0 && senha.getText().length() > 0 && rede.getText().length() > 0) {
            atualizaLog("Todas entradas fornecidas.");
            this.setImgLHOST();
            atualizaLog("Atualizado o sistema operacional."); 
            String entrada = rede.getText();
            int indicePrimeiraBarraDupla = entrada.indexOf("\\\\");
            String maquina = "";
            if (indicePrimeiraBarraDupla != -1) {
                int indicePrimeiraBarra = entrada.indexOf("\\", indicePrimeiraBarraDupla + 2);
                if (indicePrimeiraBarra != -1) {
                    maquina = entrada.substring(indicePrimeiraBarraDupla + 2, indicePrimeiraBarra);
                    
                    this.atualizaLog("Máquina destino: "+ maquina);
                } 
            }
            atualizaLog("Realizado tratamento das entradas.");
            try {
                this.getRHostAddress(maquina);
                
            } catch (SocketException ex) {
                atualizaLog("Ocorreu algum erro ao obter o endereço de IP da máquina destino.");
                cmERROR1.setVisible(false);
                Logger.getLogger(appWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
  //          connect.setEnabled(true);
  //          validate.setEnabled(false);
            logs += outputStream.toString();
            logArea.setText(logs);
            this.run = true;
            
            if(!this.labelHNAME.getText().equals(this.labelRHOST)){
             labelRHOST.setVisible(true);
             labelHNAME.setText(maquina);                
            } else{
                
            }
                //QUANDO DE FATO FUNCIONA:
       connect.setEnabled(true);
       //readB.setEnabled(true);
       validate.setEnabled(false);   
        }
        
        else {
            this.atualizaHint("Necessário informar todos os campos.");
            this.infoB.setVisible(false);
            this.aviso.setVisible(true);
        }
       atualizaLog("Validações finalizadas."); 
       
       

       
       
    }//GEN-LAST:event_validateActionPerformed

    private void paramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paramActionPerformed

    }//GEN-LAST:event_paramActionPerformed

    private void setImgLHOST (){
    
            if (this.OS.contains("Windows")) {
                atualizaLHOST("imagens/windowsHost.png");
            }

            if (this.OS.contains("Linux")) {
                atualizaLHOST("imagens/linuxHost.png");
            }

            if (this.OS.contains("Mac")) {
                atualizaLHOST("imagens/macHost.png");
            }

}
    
    private String getHorario() {
        Date agora = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("HH:mm:ss.SSSS");
        String horarioFormatado = formato.format(agora);
        horarioFormatado = "(" + horarioFormatado + ")> ";
        return horarioFormatado;
    }

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        this.atualizaLog("Iniciando autenticação com o host destino.");
//        connect.setEnabled(false);
        String username = usuario.getText();
        String password = senha.getText();
        String networkPath = rede.getText();
        networkPath = networkPath.replace("\\", "/");
        networkPath = "smb:" + networkPath + "/";
        this.atualizaLog("Caminho de rede: "+ networkPath);
        
        try {
            NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication("", username, password);
            SmbFile dir = new SmbFile(networkPath, auth);
            
            if (dir.exists() && dir.isDirectory()) {
                
                SmbFile[] files = dir.listFiles();
                if (busca.isSelected()) {
                    this.atualizaLog("☰☰☰ INICIANDO BUSCA ☰☰☰");
                    this.atualizaLog("Pastas e arquivos no diretório:");
                    for (SmbFile file : files) {
                        
                        this.atualizaLog(" Arquivo Encontrado: " + file.getName());
                    }
                    linha1.setVisible(true);
                    
                } else {

                }
            }
            

        } catch (Exception e) {
            
            this.atualizaLog("Ocorreu um erro ao autenticar e reconhecer os arquivos do diretório.");
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            this.atualizaLog(sw.toString());
            this.atualizaLog(pw.toString());
            linha1.setVisible(false);
        }
        
 //       readB.setEnabled(true); // adicionado botão sem validação
 //       connect.setEnabled(false);
        System.setOut(printStream);
  //      connect.setEnabled(false);
        logArea.setText(logs);
        readB.setEnabled(true);

    }//GEN-LAST:event_connectActionPerformed

    private void redeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redeMouseEntered
        this.atualizaHint("Informar o diretório de rede");
        this.setInfoBPosition(195);
    }//GEN-LAST:event_redeMouseEntered

    private void logActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logActionPerformed
        if (hide == false) {
            setSize(new java.awt.Dimension(615, 560));
            log.setText("▼");
            this.atualizaHint("Ok, ocultado a janela de Logs.");
            this.setInfoBPosition(188);
            hide = true;
        } else {
            setSize(new java.awt.Dimension(615, 725));
            log.setText("▲");
            this.atualizaHint("Ok, expandido a janela de Logs.");
            this.setInfoBPosition(182);
            hide = false;
        }
    }//GEN-LAST:event_logActionPerformed

    private void redeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redeKeyReleased
        // TODO add your handling code here:
        String entrada = rede.getText().replaceAll("\\s+", "");
        rede.setText(entrada);
    }//GEN-LAST:event_redeKeyReleased

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked

    }//GEN-LAST:event_jMenu1MouseClicked

    private void apagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apagarActionPerformed
        // TODO add your handling code here:
        logArea.setText("");
        this.logs = "";
        this.atualizaHint("Ok, reset do campo LOG feito.");
        this.setInfoBPosition(187);
        
    }//GEN-LAST:event_apagarActionPerformed

    private void copiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiarActionPerformed
        StringSelection selection = new StringSelection(logArea.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, null);
        this.atualizaHint("Ok, copiado logs para a área de transferência (BUFFER).");
        this.setInfoBPosition(115);
    }//GEN-LAST:event_copiarActionPerformed

    private void apagarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apagarMouseEntered
        this.atualizaHint("Limpar todos os logs.");
        this.setInfoBPosition(210);
    }//GEN-LAST:event_apagarMouseEntered

    private void copiarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copiarMouseEntered
        this.atualizaHint("Copiar logs para a área de transferência (BUFFER).");
        this.setInfoBPosition(130);
    }//GEN-LAST:event_copiarMouseEntered

    private void labelOSMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelOSMouseEntered
        hint.setText("Sistema operacional da estação local.");
        this.setInfoBPosition(164);
    }//GEN-LAST:event_labelOSMouseEntered

    private void labelLHOSTMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLHOSTMouseEntered
        this.atualizaHint("Endereço de IP da estação local.");
        this.setInfoBPosition(177);
    }//GEN-LAST:event_labelLHOSTMouseEntered

    private void labelLNAMEMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLNAMEMouseEntered
        this.atualizaHint("Nome da máquina Local.");
        this.setInfoBPosition(200);
    }//GEN-LAST:event_labelLNAMEMouseEntered

    private void labelRHOSTMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRHOSTMouseEntered
        this.atualizaHint("Endereço de IP da máquina destino.");
        this.setInfoBPosition(170);
    }//GEN-LAST:event_labelRHOSTMouseEntered

    private void labelHNAMEMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelHNAMEMouseEntered
        this.atualizaHint("Nome da máquina destino.");
        this.setInfoBPosition(195);
    }//GEN-LAST:event_labelHNAMEMouseEntered

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(null, "Desenvolvido por Mauros.");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JchooserXML();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void JchooserXML() {
        this.atualizaLog("Inicializado janela se seleção de arquivos");
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos XML", "xml");
        fileChooser.setFileFilter(filter);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(selectedFile);
                doc.getDocumentElement().normalize();
                NodeList paramList = doc.getElementsByTagName("Param.");
                for (int temp = 0; temp < paramList.getLength(); temp++) {
                    Node paramNode = paramList.item(temp);
                    if (paramNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element paramElement = (Element) paramNode;
                        String usuario = paramElement.getAttribute("Usuário");
                        String Seq = paramElement.getAttribute("Seq");
                        if (Seq.equals("185")) {
                            param.setText(usuario);
                        }
                    }
                }
            } catch (Exception e) {
                this.atualizaLog("Ocorreu um erro na leitura do arquivo.");
                e.printStackTrace();
            }
        } else {
            this.atualizaLog("Ação cancelada pelo usuário");
        }
        logs += outputStream.toString();
        logArea.setText(logs);
        tratarParam();
        this.atualizaLog("Janela se seleção de arquivos encerrada.");
    }

    private void hostMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hostMouseEntered

        if(!this.run){
        this.atualizaLHOST("imagens/hostL.png");
        this.atualizaHint("Realizar upload do arquivo XML do menu do sistema.");
        this.setInfoBPosition(125);
        }
        
        
    }//GEN-LAST:event_hostMouseEntered
    
    private void hostMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hostMouseExited
        if(!this.run){
        this.atualizaLHOST("imagens/host.png");
        }
    }//GEN-LAST:event_hostMouseExited

    private void atualizaLHOST(String path) {
        this.icon = new ImageIcon(getClass().getClassLoader().getResource(path));
        this.image = icon.getImage();
        this.ScaledImage = image.getScaledInstance(host.getWidth(), host.getHeight(), image.SCALE_SMOOTH);
        this.host.setIcon(new javax.swing.ImageIcon(ScaledImage));
    }

    private void hostMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hostMouseClicked
        
        if (!this.run){
        this.JchooserXML();
        }
        
    }//GEN-LAST:event_hostMouseClicked

    private void validateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_validateMouseExited
        // TODO add your handling code here:
        this.aviso.setVisible(false);
        
        if (!infoB.isVisible()){
        this.atualizaHint("");
        }
        
    }//GEN-LAST:event_validateMouseExited

    private void buscaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscaMouseEntered
        // TODO add your handling code here:
       this.atualizaHint("Buscar e listar todos os arquivos encontrados no diretório.");
       this.setInfoBPosition(110);
    }//GEN-LAST:event_buscaMouseEntered

    private void readBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readBMouseEntered
        // TODO add your handling code here:
        this.hintButton.setText("Teste de leitura e escrita.");
                this.atualizaHint("Enviar um arquivo de texto e realizar a leitura do arquivo.");
        this.setInfoBPosition(118);
    }//GEN-LAST:event_readBMouseEntered

    private void readBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readBMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_readBMouseExited

    private void readBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readBActionPerformed
        // TODO add your handling code here:
 //       connect.setEnabled(false);
 //       readB.setEnabled(false);
 //       reset.setEnabled(true);
    }//GEN-LAST:event_readBActionPerformed

    private void resetMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetMouseEntered
        // TODO add your handling code here:
        this.hintButton.setText("Zerar variáveis.");
                this.atualizaHint("Recarrega variáveis globais.");
        this.setInfoBPosition(193);
    }//GEN-LAST:event_resetMouseEntered

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resetActionPerformed

    private void jComboBox1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseEntered
        // TODO add your handling code here:
                this.atualizaHint("Defina a versão do protocolo SMB.");
        this.setInfoBPosition(177);
    }//GEN-LAST:event_jComboBox1MouseEntered
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(appWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(appWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(appWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(appWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            ex.printStackTrace();
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new appWindow().setVisible(true);
            }
        });
    }

    private void initImg() {
        
        
        
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource("imagens/Host.png"));
        ImageIcon icon1 = new ImageIcon(getClass().getClassLoader().getResource("imagens/fileserver.png"));
        ImageIcon icon2 = new ImageIcon(getClass().getClassLoader().getResource("imagens/line.gif"));
        ImageIcon icon3 = new ImageIcon(getClass().getClassLoader().getResource("imagens/lineR.gif"));
        ImageIcon icon4 = new ImageIcon(getClass().getClassLoader().getResource("imagens/broadband-ezgif.com-gif-maker.gif"));
        ImageIcon icon5 = new ImageIcon(getClass().getClassLoader().getResource("imagens/1625654222_14334_gif-url-ezgif.com-resize.gif"));
        ImageIcon icon6 = new ImageIcon(getClass().getClassLoader().getResource("imagens/eraser.png"));
        ImageIcon icon7 = new ImageIcon(getClass().getClassLoader().getResource("imagens/copy.png"));
        ImageIcon icon8 = new ImageIcon(getClass().getClassLoader().getResource("imagens/info_button.png"));
        ImageIcon icon10 = new ImageIcon(getClass().getClassLoader().getResource("imagens/1618932779_82532_gif-url-ezgif.com-speed.gif"));
        ImageIcon icon13 = new ImageIcon(getClass().getClassLoader().getResource("imagens/08-32-06-494_512-ezgif.com-gif-maker.gif"));
        
        ImageIcon icon14 = new ImageIcon(getClass().getClassLoader().getResource("imagens/check-mark-icon-green-0.png"));
        ImageIcon icon15 = new ImageIcon(getClass().getClassLoader().getResource("imagens/error-icon-4.png"));
        
        Image image = icon.getImage();
        Image image1 = icon1.getImage();
        Image image2 = icon2.getImage();
        Image image3 = icon3.getImage();
        Image image4 = icon4.getImage();
        Image image5 = icon5.getImage();
        Image image6 = icon6.getImage();
        Image image7 = icon7.getImage();
        Image image8 = icon8.getImage();
        Image image10 = icon10.getImage();
        Image image13 = icon13.getImage();
        Image image14 = icon14.getImage();
        Image image15 = icon15.getImage();
        
        Image ScaledImage = image.getScaledInstance(host.getWidth(), host.getHeight(), image.SCALE_SMOOTH);
        Image ScaledImage1 = image1.getScaledInstance(nas.getWidth(), nas.getHeight() - 20, image1.SCALE_SMOOTH);
        Image ScaledImage2 = image4.getScaledInstance(validate.getWidth() - 30, validate.getHeight(), image1.SCALE_SMOOTH);
        Image ScaledImage3 = image5.getScaledInstance(connect.getWidth() - 25, connect.getHeight() - 05, image1.SCALE_SMOOTH);
        Image ScaledImage4 = image6.getScaledInstance(apagar.getWidth() - 25, apagar.getHeight() - 15, image1.SCALE_SMOOTH);
        Image ScaledImage5 = image7.getScaledInstance(copiar.getWidth() - 25, copiar.getHeight() - 15, image1.SCALE_SMOOTH);
        Image ScaledImage6 = image8.getScaledInstance(infoB.getWidth() - 25, infoB.getHeight() - 15, image1.SCALE_SMOOTH);
        Image ScaledImage9 = image10.getScaledInstance(readB.getWidth() - 150, readB.getHeight() -25, image1.SCALE_SMOOTH);
        Image ScaledImage10 = image13.getScaledInstance(reset.getWidth() - 25, reset.getHeight() - 15, image1.SCALE_SMOOTH);
 
        Image ScaledImage14 = image14.getScaledInstance(readB.getWidth() - 150, readB.getHeight() -25, image1.SCALE_SMOOTH);
        Image ScaledImage15 = image15.getScaledInstance(reset.getWidth() - 65, reset.getHeight() - 25, image1.SCALE_SMOOTH);
        
        readB.setIcon(new javax.swing.ImageIcon(image10));
        host.setIcon(new javax.swing.ImageIcon(ScaledImage));
        nas.setIcon(new javax.swing.ImageIcon(ScaledImage1));
        linha.setIcon(new javax.swing.ImageIcon(image2));
        linha1.setIcon(new javax.swing.ImageIcon(image3));
        validate.setIcon(new javax.swing.ImageIcon(image4));
        connect.setIcon(new javax.swing.ImageIcon(image5));
        apagar.setIcon(new javax.swing.ImageIcon(ScaledImage4));
        copiar.setIcon(new javax.swing.ImageIcon(ScaledImage5));
        infoB.setIcon(new javax.swing.ImageIcon(ScaledImage6));
        reset.setIcon(new javax.swing.ImageIcon(image13));
        
        cmOK1.setIcon(new javax.swing.ImageIcon(ScaledImage14));
cmERROR1.setIcon(new javax.swing.ImageIcon(ScaledImage15));
cmOK2.setIcon(new javax.swing.ImageIcon(ScaledImage14));
cmERROR2.setIcon(new javax.swing.ImageIcon(ScaledImage15));
cmOK3.setIcon(new javax.swing.ImageIcon(ScaledImage14));
cmERROR3.setIcon(new javax.swing.ImageIcon(ScaledImage15));
        
        
        
        linha.setVisible(false);
        linha1.setVisible(false);
        this.aviso.setVisible(false);
        System.setOut(printStream);
        this.setInfoBPosition(160);
        labelRHOST.setVisible(false);
        
        cmOK1.setVisible(false);
        cmOK2.setVisible(false);
        cmOK3.setVisible(false);
        cmERROR1.setVisible(false);
        cmERROR2.setVisible(false);
        cmERROR3.setVisible(false);
 //       reset.setBackground(Color.BLACK);
 //       reset.setForeground(Color.BLACK);
    }
    
    private void initLogsAction(){
        System.setOut(printStream);
            logs += outputStream.toString();
            logArea.setText(logs);
    }

    private void atualizaLog(String txt) {
        Date currentTime = new Date();   
        this.logs += "["+this.username+"@"+this.hostName+" ("+timeFormat.format(currentTime)+ ")]> "+ txt + "\n";
    }

    private void atualizaDominio(String txt) {
        this.dominio.setText(txt);
    }

    private void atualizaUsuario(String txt) {
        this.usuario.setText(txt);
    }

    private void atualizaSenha(String txt) {
        this.senha.setText(txt);
    }

    private void atualizaHint(String txt) {
        this.hint.setText(txt);
    }
    
        private void setInfoBPosition (int x){
        this.infoB.setVisible(true);
        this.resetInfoBPosition();
        this.infoB.setBounds(x+this.infoB.getLocation().x, this.infoB.getLocation().y, 40, 30);
        this.infoB.setVisible(true);
    }
    
    private void resetInfoBPosition (){
        this.infoB.setBounds(10, 0, 40, 30);
    }
    
    private void getRHostAddress (String nomeDoHost) throws SocketException{
        
            try {
                InetAddress enderecoIP = InetAddress.getByName(nomeDoHost);
                String enderecoIPStr = enderecoIP.getHostAddress();
                this.atualizaLog("Endereço de IP da máquina destino: "+enderecoIPStr);
                this.atualizaLog("Realizando testes de conectividade.");
                if(enderecoIPStr.equals("127.0.0.1")){
                            
                            cmERROR1.setVisible(true);
                                    } else{
                    cmOK1.setVisible(true);
                }
                labelRHOST.setText(enderecoIPStr);
                linha.setVisible(true); 
               
            } catch (UnknownHostException e) {
                System.err.println(this.getHorario() + "Não foi possível encontrar o endereço IP para o host: " + nomeDoHost);
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);

                this.atualizaLog(sw.toString());
            }  

    }
    
 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apagar;
    private javax.swing.JLabel aviso;
    private javax.swing.JCheckBox busca;
    private javax.swing.JLabel cmERROR1;
    private javax.swing.JLabel cmERROR2;
    private javax.swing.JLabel cmERROR3;
    private javax.swing.JLabel cmOK1;
    private javax.swing.JLabel cmOK2;
    private javax.swing.JLabel cmOK3;
    private javax.swing.JButton connect;
    private javax.swing.JButton copiar;
    private javax.swing.JLabel destino;
    private javax.swing.JTextField dominio;
    private javax.swing.JLabel fundo;
    private javax.swing.JLabel hint;
    private javax.swing.JLabel hintButton;
    private javax.swing.JLabel host;
    private javax.swing.JLabel infoB;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labelHNAME;
    private javax.swing.JLabel labelLHOST;
    private javax.swing.JLabel labelLNAME;
    private javax.swing.JLabel labelOS;
    private javax.swing.JLabel labelRHOST;
    private javax.swing.JLabel linha;
    private javax.swing.JLabel linha1;
    private javax.swing.JButton log;
    private javax.swing.JTextArea logArea;
    private javax.swing.JLabel nas;
    private javax.swing.JTextField param;
    private javax.swing.JButton readB;
    private javax.swing.JTextField rede;
    private javax.swing.JButton reset;
    private javax.swing.JLabel retorno;
    private javax.swing.JTextField senha;
    private javax.swing.JTextField usuario;
    private javax.swing.JButton validate;
    // End of variables declaration//GEN-END:variables
}
